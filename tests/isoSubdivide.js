/**
 * Module dependencies.
 */

var util = require('util');
var _ = require('underscore');
var THREE = require('three');
var Geo = require('./../GeoSubDivModifier.js');
var chai = require('chai');
if (_.isFunction(chai.should)){
	chai.should();
}

var sdm = new Geo();

describe('subdividing isocehedron', function () {
	var iso;
	beforeEach(function () {
		iso = new THREE.IcosahedronGeometry(100);
	});

	it('should have the expected start points', function () {

		var vs = _.map(iso.vertices, function (v) {
			return {
				x: Math.round(v.x),
				y: Math.round(v.y),
				z: Math.round(v.z)
			}
		});

		vs.should.eql([
			{ x: -53, y: 85, z: 0 },
			{ x: 53, y: 85, z: 0 },
			{ x: -53, y: -85, z: 0 },
			{ x: 53, y: -85, z: 0 }, //3
			{ x: 0, y: -53, z: 85 },
			{ x: 0, y: 53, z: 85 },
			{ x: 0, y: -53, z: -85 }, // 6
			{ x: 0, y: 53, z: -85 },
			{ x: 85, y: 0, z: -53 },
			{ x: 85, y: 0, z: 53 },  // 9
			{ x: -85, y: 0, z: -53 },
			{ x: -85, y: 0, z: 53 }
		]  );

		var fs = _.map(iso.faces, function(face){
			return [face.a, face.b, face.c];
		})

		fs.should.eql([
			[ 0, 11, 5 ],  // 0
			[ 0, 5, 1 ],
			[ 0, 1, 7 ],  // 2
			[ 0, 7, 10 ],
			[ 0, 10, 11 ], // 4
			[ 1, 5, 9 ],
			[ 5, 11, 4 ],   // 6
			[ 11, 10, 2 ],
			[ 10, 7, 6 ],   // 8
			[ 7, 1, 8 ],
			[ 3, 9, 4 ],  // 10
			[ 3, 4, 2 ],
			[ 3, 2, 6 ],  // 12
			[ 3, 6, 8 ],
			[ 3, 8, 9 ],  // 14
			[ 4, 9, 5 ],
			[ 2, 4, 11 ],   // 16
			[ 6, 2, 10 ],
			[ 8, 6, 7 ],   // 18
			[ 9, 8, 1 ] ]);
	});

	it('should be able to subdivide triangles', function(){

		var sd = THREE.GeometryUtils.subdivideTriangles(iso);

		console.log('subdivided triangles: %s', util.inspect(sd));

		sd.should.eql([ { '0_11': [ 0, 4 ],
			'5_11': [ 0, 6 ],
			'0_5': [ 0, 1 ],
			'1_5': [ 1, 5 ],
			'0_1': [ 1, 2 ],
			'1_7': [ 2, 9 ],
			'0_7': [ 2, 3 ],
			'7_10': [ 3, 8 ],
			'0_10': [ 3, 4 ],
			'10_11': [ 4, 7 ],
			'5_9': [ 5, 15 ],
			'1_9': [ 5, 19 ],
			'4_11': [ 6, 16 ],
			'4_5': [ 6, 15 ],
			'2_10': [ 7, 17 ],
			'2_11': [ 7, 16 ],
			'6_7': [ 8, 18 ],
			'6_10': [ 8, 17 ],
			'1_8': [ 9, 19 ],
			'7_8': [ 9, 18 ],
			'3_9': [ 10, 14 ],
			'4_9': [ 10, 15 ],
			'3_4': [ 10, 11 ],
			'2_4': [ 11, 16 ],
			'2_3': [ 11, 12 ],
			'2_6': [ 12, 17 ],
			'3_6': [ 12, 13 ],
			'6_8': [ 13, 18 ],
			'3_8': [ 13, 14 ],
			'8_9': [ 14, 19 ] },
			[ [ 0, '0_11', '0_5' ],
				[ 11, '5_11', '0_11' ],
				[ 5, '0_5', '5_11' ],
				[ '0_11', '5_11', '0_5' ],
				[ 0, '0_5', '0_1' ],
				[ 5, '1_5', '0_5' ],
				[ 1, '0_1', '1_5' ],
				[ '0_5', '1_5', '0_1' ],
				[ 0, '0_1', '0_7' ],
				[ 1, '1_7', '0_1' ],
				[ 7, '0_7', '1_7' ],
				[ '0_1', '1_7', '0_7' ],
				[ 0, '0_7', '0_10' ],
				[ 7, '7_10', '0_7' ],
				[ 10, '0_10', '7_10' ],
				[ '0_7', '7_10', '0_10' ],
				[ 0, '0_10', '0_11' ],
				[ 10, '10_11', '0_10' ],
				[ 11, '0_11', '10_11' ],
				[ '0_10', '10_11', '0_11' ],
				[ 1, '1_5', '1_9' ],
				[ 5, '5_9', '1_5' ],
				[ 9, '1_9', '5_9' ],
				[ '1_5', '5_9', '1_9' ],
				[ 5, '5_11', '4_5' ],
				[ 11, '4_11', '5_11' ],
				[ 4, '4_5', '4_11' ],
				[ '5_11', '4_11', '4_5' ],
				[ 11, '10_11', '2_11' ],
				[ 10, '2_10', '10_11' ],
				[ 2, '2_11', '2_10' ],
				[ '10_11', '2_10', '2_11' ],
				[ 10, '7_10', '6_10' ],
				[ 7, '6_7', '7_10' ],
				[ 6, '6_10', '6_7' ],
				[ '7_10', '6_7', '6_10' ],
				[ 7, '1_7', '7_8' ],
				[ 1, '1_8', '1_7' ],
				[ 8, '7_8', '1_8' ],
				[ '1_7', '1_8', '7_8' ],
				[ 3, '3_9', '3_4' ],
				[ 9, '4_9', '3_9' ],
				[ 4, '3_4', '4_9' ],
				[ '3_9', '4_9', '3_4' ],
				[ 3, '3_4', '2_3' ],
				[ 4, '2_4', '3_4' ],
				[ 2, '2_3', '2_4' ],
				[ '3_4', '2_4', '2_3' ],
				[ 3, '2_3', '3_6' ],
				[ 2, '2_6', '2_3' ],
				[ 6, '3_6', '2_6' ],
				[ '2_3', '2_6', '3_6' ],
				[ 3, '3_6', '3_8' ],
				[ 6, '6_8', '3_6' ],
				[ 8, '3_8', '6_8' ],
				[ '3_6', '6_8', '3_8' ],
				[ 3, '3_8', '3_9' ],
				[ 8, '8_9', '3_8' ],
				[ 9, '3_9', '8_9' ],
				[ '3_8', '8_9', '3_9' ],
				[ 4, '4_9', '4_5' ],
				[ 9, '5_9', '4_9' ],
				[ 5, '4_5', '5_9' ],
				[ '4_9', '5_9', '4_5' ],
				[ 2, '2_4', '2_11' ],
				[ 4, '4_11', '2_4' ],
				[ 11, '2_11', '4_11' ],
				[ '2_4', '4_11', '2_11' ],
				[ 6, '2_6', '6_10' ],
				[ 2, '2_10', '2_6' ],
				[ 10, '6_10', '2_10' ],
				[ '2_6', '2_10', '6_10' ],
				[ 8, '6_8', '7_8' ],
				[ 6, '6_7', '6_8' ],
				[ 7, '7_8', '6_7' ],
				[ '6_8', '6_7', '7_8' ],
				[ 9, '8_9', '1_9' ],
				[ 8, '1_8', '8_9' ],
				[ 1, '1_9', '1_8' ],
				[ '8_9', '1_8', '1_9' ] ] ])

		var newData =  THREE.GeometryUtils.sdDataToFaces(iso.vertices, sd[0], sd[1]);

		console.log('new Data: %s', util.inspect(newData));
	})

})

//console.log('points: %s', util.inspect(vs));